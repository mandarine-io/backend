// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	locale "github.com/mandarine-io/backend/internal/infrastructure/locale"
	mock "github.com/stretchr/testify/mock"
)

// BundleMock is an autogenerated mock type for the Bundle type
type BundleMock struct {
	mock.Mock
}

type BundleMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BundleMock) EXPECT() *BundleMock_Expecter {
	return &BundleMock_Expecter{mock: &_m.Mock}
}

// NewLocalizer provides a mock function with given fields: lang
func (_m *BundleMock) NewLocalizer(lang string) locale.Localizer {
	ret := _m.Called(lang)

	if len(ret) == 0 {
		panic("no return value specified for NewLocalizer")
	}

	var r0 locale.Localizer
	if rf, ok := ret.Get(0).(func(string) locale.Localizer); ok {
		r0 = rf(lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(locale.Localizer)
		}
	}

	return r0
}

// BundleMock_NewLocalizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewLocalizer'
type BundleMock_NewLocalizer_Call struct {
	*mock.Call
}

// NewLocalizer is a helper method to define mock.On call
//   - lang string
func (_e *BundleMock_Expecter) NewLocalizer(lang interface{}) *BundleMock_NewLocalizer_Call {
	return &BundleMock_NewLocalizer_Call{Call: _e.mock.On("NewLocalizer", lang)}
}

func (_c *BundleMock_NewLocalizer_Call) Run(run func(lang string)) *BundleMock_NewLocalizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BundleMock_NewLocalizer_Call) Return(_a0 locale.Localizer) *BundleMock_NewLocalizer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BundleMock_NewLocalizer_Call) RunAndReturn(run func(string) locale.Localizer) *BundleMock_NewLocalizer_Call {
	_c.Call.Return(run)
	return _c
}

// NewBundleMock creates a new instance of BundleMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBundleMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BundleMock {
	mock := &BundleMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
