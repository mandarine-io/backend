// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// LocalizerMock is an autogenerated mock type for the Localizer type
type LocalizerMock struct {
	mock.Mock
}

type LocalizerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalizerMock) EXPECT() *LocalizerMock_Expecter {
	return &LocalizerMock_Expecter{mock: &_m.Mock}
}

// Localize provides a mock function with given fields: tag, args, pluralCount
func (_m *LocalizerMock) Localize(tag string, args any, pluralCount int) string {
	ret := _m.Called(tag, args, pluralCount)

	if len(ret) == 0 {
		panic("no return value specified for Localize")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, any, int) string); ok {
		r0 = rf(tag, args, pluralCount)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LocalizerMock_Localize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Localize'
type LocalizerMock_Localize_Call struct {
	*mock.Call
}

// Localize is a helper method to define mock.On call
//   - tag string
//   - args any
//   - pluralCount int
func (_e *LocalizerMock_Expecter) Localize(tag interface{}, args interface{}, pluralCount interface{}) *LocalizerMock_Localize_Call {
	return &LocalizerMock_Localize_Call{Call: _e.mock.On("Localize", tag, args, pluralCount)}
}

func (_c *LocalizerMock_Localize_Call) Run(run func(tag string, args any, pluralCount int)) *LocalizerMock_Localize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any), args[2].(int))
	})
	return _c
}

func (_c *LocalizerMock_Localize_Call) Return(_a0 string) *LocalizerMock_Localize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LocalizerMock_Localize_Call) RunAndReturn(run func(string, any, int) string) *LocalizerMock_Localize_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocalizerMock creates a new instance of LocalizerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalizerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalizerMock {
	mock := &LocalizerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
