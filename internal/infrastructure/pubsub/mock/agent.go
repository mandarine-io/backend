// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	pubsub "github.com/mandarine-io/backend/internal/infrastructure/pubsub"
	mock "github.com/stretchr/testify/mock"
)

// AgentMock is an autogenerated mock type for the Agent type
type AgentMock struct {
	mock.Mock
}

type AgentMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentMock) EXPECT() *AgentMock_Expecter {
	return &AgentMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *AgentMock) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type AgentMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *AgentMock_Expecter) Close() *AgentMock_Close_Call {
	return &AgentMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *AgentMock_Close_Call) Run(run func()) *AgentMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AgentMock_Close_Call) Return(_a0 error) *AgentMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentMock_Close_Call) RunAndReturn(run func() error) *AgentMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, msg
func (_m *AgentMock) Publish(ctx context.Context, topic string, msg any) error {
	ret := _m.Called(ctx, topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any) error); ok {
		r0 = rf(ctx, topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentMock_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type AgentMock_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - msg any
func (_e *AgentMock_Expecter) Publish(ctx interface{}, topic interface{}, msg interface{}) *AgentMock_Publish_Call {
	return &AgentMock_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, msg)}
}

func (_c *AgentMock_Publish_Call) Run(run func(ctx context.Context, topic string, msg any)) *AgentMock_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *AgentMock_Publish_Call) Return(_a0 error) *AgentMock_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentMock_Publish_Call) RunAndReturn(run func(context.Context, string, any) error) *AgentMock_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, topic
func (_m *AgentMock) Subscribe(ctx context.Context, topic string) (<-chan pubsub.Event, error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan pubsub.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan pubsub.Event, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan pubsub.Event); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan pubsub.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentMock_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type AgentMock_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
func (_e *AgentMock_Expecter) Subscribe(ctx interface{}, topic interface{}) *AgentMock_Subscribe_Call {
	return &AgentMock_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, topic)}
}

func (_c *AgentMock_Subscribe_Call) Run(run func(ctx context.Context, topic string)) *AgentMock_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AgentMock_Subscribe_Call) Return(_a0 <-chan pubsub.Event, _a1 error) *AgentMock_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentMock_Subscribe_Call) RunAndReturn(run func(context.Context, string) (<-chan pubsub.Event, error)) *AgentMock_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: ctx, topic
func (_m *AgentMock) Unsubscribe(ctx context.Context, topic string) error {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentMock_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type AgentMock_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
func (_e *AgentMock_Expecter) Unsubscribe(ctx interface{}, topic interface{}) *AgentMock_Unsubscribe_Call {
	return &AgentMock_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx, topic)}
}

func (_c *AgentMock_Unsubscribe_Call) Run(run func(ctx context.Context, topic string)) *AgentMock_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AgentMock_Unsubscribe_Call) Return(_a0 error) *AgentMock_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentMock_Unsubscribe_Call) RunAndReturn(run func(context.Context, string) error) *AgentMock_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgentMock creates a new instance of AgentMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentMock {
	mock := &AgentMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
