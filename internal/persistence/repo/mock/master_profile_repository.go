// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/mandarine-io/backend/internal/persistence/entity"
	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	repo "github.com/mandarine-io/backend/internal/persistence/repo"

	uuid "github.com/google/uuid"
)

// MasterProfileRepositoryMock is an autogenerated mock type for the MasterProfileRepository type
type MasterProfileRepositoryMock struct {
	mock.Mock
}

type MasterProfileRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MasterProfileRepositoryMock) EXPECT() *MasterProfileRepositoryMock_Expecter {
	return &MasterProfileRepositoryMock_Expecter{mock: &_m.Mock}
}

// CountMasterProfiles provides a mock function with given fields: ctx, scopes
func (_m *MasterProfileRepositoryMock) CountMasterProfiles(ctx context.Context, scopes ...repo.Scope) (int64, error) {
	_va := make([]interface{}, len(scopes))
	for _i := range scopes {
		_va[_i] = scopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountMasterProfiles")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...repo.Scope) (int64, error)); ok {
		return rf(ctx, scopes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...repo.Scope) int64); ok {
		r0 = rf(ctx, scopes...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...repo.Scope) error); ok {
		r1 = rf(ctx, scopes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_CountMasterProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMasterProfiles'
type MasterProfileRepositoryMock_CountMasterProfiles_Call struct {
	*mock.Call
}

// CountMasterProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - scopes ...repo.Scope
func (_e *MasterProfileRepositoryMock_Expecter) CountMasterProfiles(ctx interface{}, scopes ...interface{}) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	return &MasterProfileRepositoryMock_CountMasterProfiles_Call{Call: _e.mock.On("CountMasterProfiles",
		append([]interface{}{ctx}, scopes...)...)}
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) Run(run func(ctx context.Context, scopes ...repo.Scope)) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]repo.Scope, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(repo.Scope)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) Return(_a0 int64, _a1 error) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) RunAndReturn(run func(context.Context, ...repo.Scope) (int64, error)) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMasterProfile provides a mock function with given fields: ctx, masterProfile
func (_m *MasterProfileRepositoryMock) CreateMasterProfile(ctx context.Context, masterProfile *entity.MasterProfile) (*entity.MasterProfile, error) {
	ret := _m.Called(ctx, masterProfile)

	if len(ret) == 0 {
		panic("no return value specified for CreateMasterProfile")
	}

	var r0 *entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MasterProfile) (*entity.MasterProfile, error)); ok {
		return rf(ctx, masterProfile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MasterProfile) *entity.MasterProfile); ok {
		r0 = rf(ctx, masterProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.MasterProfile) error); ok {
		r1 = rf(ctx, masterProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_CreateMasterProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMasterProfile'
type MasterProfileRepositoryMock_CreateMasterProfile_Call struct {
	*mock.Call
}

// CreateMasterProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - masterProfile *entity.MasterProfile
func (_e *MasterProfileRepositoryMock_Expecter) CreateMasterProfile(ctx interface{}, masterProfile interface{}) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	return &MasterProfileRepositoryMock_CreateMasterProfile_Call{Call: _e.mock.On("CreateMasterProfile", ctx, masterProfile)}
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) Run(run func(ctx context.Context, masterProfile *entity.MasterProfile)) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.MasterProfile))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) Return(_a0 *entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) RunAndReturn(run func(context.Context, *entity.MasterProfile) (*entity.MasterProfile, error)) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsMasterProfileByUserID provides a mock function with given fields: ctx, id
func (_m *MasterProfileRepositoryMock) ExistsMasterProfileByUserID(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsMasterProfileByUserID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsMasterProfileByUserID'
type MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call struct {
	*mock.Call
}

// ExistsMasterProfileByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MasterProfileRepositoryMock_Expecter) ExistsMasterProfileByUserID(ctx interface{}, id interface{}) *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call {
	return &MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call{Call: _e.mock.On("ExistsMasterProfileByUserID", ctx, id)}
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call) Return(_a0 bool, _a1 error) *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MasterProfileRepositoryMock_ExistsMasterProfileByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsMasterProfileByUsername provides a mock function with given fields: ctx, username
func (_m *MasterProfileRepositoryMock) ExistsMasterProfileByUsername(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for ExistsMasterProfileByUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsMasterProfileByUsername'
type MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call struct {
	*mock.Call
}

// ExistsMasterProfileByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MasterProfileRepositoryMock_Expecter) ExistsMasterProfileByUsername(ctx interface{}, username interface{}) *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call {
	return &MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call{Call: _e.mock.On("ExistsMasterProfileByUsername", ctx, username)}
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call) Run(run func(ctx context.Context, username string)) *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call) Return(_a0 bool, _a1 error) *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MasterProfileRepositoryMock_ExistsMasterProfileByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindEnabledMasterProfileByUsername provides a mock function with given fields: ctx, username
func (_m *MasterProfileRepositoryMock) FindEnabledMasterProfileByUsername(ctx context.Context, username string) (*entity.MasterProfile, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindEnabledMasterProfileByUsername")
	}

	var r0 *entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.MasterProfile, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.MasterProfile); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindEnabledMasterProfileByUsername'
type MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call struct {
	*mock.Call
}

// FindEnabledMasterProfileByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MasterProfileRepositoryMock_Expecter) FindEnabledMasterProfileByUsername(ctx interface{}, username interface{}) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	return &MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call{Call: _e.mock.On("FindEnabledMasterProfileByUsername", ctx, username)}
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) Run(run func(ctx context.Context, username string)) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) Return(_a0 *entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) RunAndReturn(run func(context.Context, string) (*entity.MasterProfile, error)) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindMasterProfileByUserID provides a mock function with given fields: ctx, id
func (_m *MasterProfileRepositoryMock) FindMasterProfileByUserID(ctx context.Context, id uuid.UUID) (*entity.MasterProfile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindMasterProfileByUserID")
	}

	var r0 *entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.MasterProfile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.MasterProfile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindMasterProfileByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMasterProfileByUserID'
type MasterProfileRepositoryMock_FindMasterProfileByUserID_Call struct {
	*mock.Call
}

// FindMasterProfileByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MasterProfileRepositoryMock_Expecter) FindMasterProfileByUserID(ctx interface{}, id interface{}) *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call {
	return &MasterProfileRepositoryMock_FindMasterProfileByUserID_Call{Call: _e.mock.On("FindMasterProfileByUserID", ctx, id)}
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call) Return(_a0 *entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.MasterProfile, error)) *MasterProfileRepositoryMock_FindMasterProfileByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindMasterProfileByUsername provides a mock function with given fields: ctx, username
func (_m *MasterProfileRepositoryMock) FindMasterProfileByUsername(ctx context.Context, username string) (*entity.MasterProfile, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindMasterProfileByUsername")
	}

	var r0 *entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.MasterProfile, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.MasterProfile); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindMasterProfileByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMasterProfileByUsername'
type MasterProfileRepositoryMock_FindMasterProfileByUsername_Call struct {
	*mock.Call
}

// FindMasterProfileByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MasterProfileRepositoryMock_Expecter) FindMasterProfileByUsername(ctx interface{}, username interface{}) *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call {
	return &MasterProfileRepositoryMock_FindMasterProfileByUsername_Call{Call: _e.mock.On("FindMasterProfileByUsername", ctx, username)}
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call) Run(run func(ctx context.Context, username string)) *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call) Return(_a0 *entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call) RunAndReturn(run func(context.Context, string) (*entity.MasterProfile, error)) *MasterProfileRepositoryMock_FindMasterProfileByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindMasterProfiles provides a mock function with given fields: ctx, scopes
func (_m *MasterProfileRepositoryMock) FindMasterProfiles(ctx context.Context, scopes ...repo.Scope) ([]*entity.MasterProfile, error) {
	_va := make([]interface{}, len(scopes))
	for _i := range scopes {
		_va[_i] = scopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindMasterProfiles")
	}

	var r0 []*entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...repo.Scope) ([]*entity.MasterProfile, error)); ok {
		return rf(ctx, scopes...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...repo.Scope) []*entity.MasterProfile); ok {
		r0 = rf(ctx, scopes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...repo.Scope) error); ok {
		r1 = rf(ctx, scopes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindMasterProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMasterProfiles'
type MasterProfileRepositoryMock_FindMasterProfiles_Call struct {
	*mock.Call
}

// FindMasterProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - scopes ...repo.Scope
func (_e *MasterProfileRepositoryMock_Expecter) FindMasterProfiles(ctx interface{}, scopes ...interface{}) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	return &MasterProfileRepositoryMock_FindMasterProfiles_Call{Call: _e.mock.On("FindMasterProfiles",
		append([]interface{}{ctx}, scopes...)...)}
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) Run(run func(ctx context.Context, scopes ...repo.Scope)) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]repo.Scope, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(repo.Scope)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) Return(_a0 []*entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) RunAndReturn(run func(context.Context, ...repo.Scope) ([]*entity.MasterProfile, error)) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMasterProfile provides a mock function with given fields: ctx, masterProfile
func (_m *MasterProfileRepositoryMock) UpdateMasterProfile(ctx context.Context, masterProfile *entity.MasterProfile) (*entity.MasterProfile, error) {
	ret := _m.Called(ctx, masterProfile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMasterProfile")
	}

	var r0 *entity.MasterProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MasterProfile) (*entity.MasterProfile, error)); ok {
		return rf(ctx, masterProfile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MasterProfile) *entity.MasterProfile); ok {
		r0 = rf(ctx, masterProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MasterProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.MasterProfile) error); ok {
		r1 = rf(ctx, masterProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_UpdateMasterProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMasterProfile'
type MasterProfileRepositoryMock_UpdateMasterProfile_Call struct {
	*mock.Call
}

// UpdateMasterProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - masterProfile *entity.MasterProfile
func (_e *MasterProfileRepositoryMock_Expecter) UpdateMasterProfile(ctx interface{}, masterProfile interface{}) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	return &MasterProfileRepositoryMock_UpdateMasterProfile_Call{Call: _e.mock.On("UpdateMasterProfile", ctx, masterProfile)}
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) Run(run func(ctx context.Context, masterProfile *entity.MasterProfile)) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.MasterProfile))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) Return(_a0 *entity.MasterProfile, _a1 error) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) RunAndReturn(run func(context.Context, *entity.MasterProfile) (*entity.MasterProfile, error)) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Return(run)
	return _c
}

// WithAddressFilter provides a mock function with given fields: address
func (_m *MasterProfileRepositoryMock) WithAddressFilter(address string) repo.Scope {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for WithAddressFilter")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(string) repo.Scope); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithAddressFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithAddressFilter'
type MasterProfileRepositoryMock_WithAddressFilter_Call struct {
	*mock.Call
}

// WithAddressFilter is a helper method to define mock.On call
//   - address string
func (_e *MasterProfileRepositoryMock_Expecter) WithAddressFilter(address interface{}) *MasterProfileRepositoryMock_WithAddressFilter_Call {
	return &MasterProfileRepositoryMock_WithAddressFilter_Call{Call: _e.mock.On("WithAddressFilter", address)}
}

func (_c *MasterProfileRepositoryMock_WithAddressFilter_Call) Run(run func(address string)) *MasterProfileRepositoryMock_WithAddressFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithAddressFilter_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithAddressFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithAddressFilter_Call) RunAndReturn(run func(string) repo.Scope) *MasterProfileRepositoryMock_WithAddressFilter_Call {
	_c.Call.Return(run)
	return _c
}

// WithColumnSort provides a mock function with given fields: field, asc
func (_m *MasterProfileRepositoryMock) WithColumnSort(field string, asc bool) repo.Scope {
	ret := _m.Called(field, asc)

	if len(ret) == 0 {
		panic("no return value specified for WithColumnSort")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(string, bool) repo.Scope); ok {
		r0 = rf(field, asc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithColumnSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithColumnSort'
type MasterProfileRepositoryMock_WithColumnSort_Call struct {
	*mock.Call
}

// WithColumnSort is a helper method to define mock.On call
//   - field string
//   - asc bool
func (_e *MasterProfileRepositoryMock_Expecter) WithColumnSort(field interface{}, asc interface{}) *MasterProfileRepositoryMock_WithColumnSort_Call {
	return &MasterProfileRepositoryMock_WithColumnSort_Call{Call: _e.mock.On("WithColumnSort", field, asc)}
}

func (_c *MasterProfileRepositoryMock_WithColumnSort_Call) Run(run func(field string, asc bool)) *MasterProfileRepositoryMock_WithColumnSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithColumnSort_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithColumnSort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithColumnSort_Call) RunAndReturn(run func(string, bool) repo.Scope) *MasterProfileRepositoryMock_WithColumnSort_Call {
	_c.Call.Return(run)
	return _c
}

// WithDisplayNameFilter provides a mock function with given fields: displayName
func (_m *MasterProfileRepositoryMock) WithDisplayNameFilter(displayName string) repo.Scope {
	ret := _m.Called(displayName)

	if len(ret) == 0 {
		panic("no return value specified for WithDisplayNameFilter")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(string) repo.Scope); ok {
		r0 = rf(displayName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithDisplayNameFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDisplayNameFilter'
type MasterProfileRepositoryMock_WithDisplayNameFilter_Call struct {
	*mock.Call
}

// WithDisplayNameFilter is a helper method to define mock.On call
//   - displayName string
func (_e *MasterProfileRepositoryMock_Expecter) WithDisplayNameFilter(displayName interface{}) *MasterProfileRepositoryMock_WithDisplayNameFilter_Call {
	return &MasterProfileRepositoryMock_WithDisplayNameFilter_Call{Call: _e.mock.On("WithDisplayNameFilter", displayName)}
}

func (_c *MasterProfileRepositoryMock_WithDisplayNameFilter_Call) Run(run func(displayName string)) *MasterProfileRepositoryMock_WithDisplayNameFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithDisplayNameFilter_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithDisplayNameFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithDisplayNameFilter_Call) RunAndReturn(run func(string) repo.Scope) *MasterProfileRepositoryMock_WithDisplayNameFilter_Call {
	_c.Call.Return(run)
	return _c
}

// WithJobFilter provides a mock function with given fields: job
func (_m *MasterProfileRepositoryMock) WithJobFilter(job string) repo.Scope {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for WithJobFilter")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(string) repo.Scope); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithJobFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithJobFilter'
type MasterProfileRepositoryMock_WithJobFilter_Call struct {
	*mock.Call
}

// WithJobFilter is a helper method to define mock.On call
//   - job string
func (_e *MasterProfileRepositoryMock_Expecter) WithJobFilter(job interface{}) *MasterProfileRepositoryMock_WithJobFilter_Call {
	return &MasterProfileRepositoryMock_WithJobFilter_Call{Call: _e.mock.On("WithJobFilter", job)}
}

func (_c *MasterProfileRepositoryMock_WithJobFilter_Call) Run(run func(job string)) *MasterProfileRepositoryMock_WithJobFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithJobFilter_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithJobFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithJobFilter_Call) RunAndReturn(run func(string) repo.Scope) *MasterProfileRepositoryMock_WithJobFilter_Call {
	_c.Call.Return(run)
	return _c
}

// WithPagination provides a mock function with given fields: page, pageSize
func (_m *MasterProfileRepositoryMock) WithPagination(page int, pageSize int) repo.Scope {
	ret := _m.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for WithPagination")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(int, int) repo.Scope); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPagination'
type MasterProfileRepositoryMock_WithPagination_Call struct {
	*mock.Call
}

// WithPagination is a helper method to define mock.On call
//   - page int
//   - pageSize int
func (_e *MasterProfileRepositoryMock_Expecter) WithPagination(page interface{}, pageSize interface{}) *MasterProfileRepositoryMock_WithPagination_Call {
	return &MasterProfileRepositoryMock_WithPagination_Call{Call: _e.mock.On("WithPagination", page, pageSize)}
}

func (_c *MasterProfileRepositoryMock_WithPagination_Call) Run(run func(page int, pageSize int)) *MasterProfileRepositoryMock_WithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPagination_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithPagination_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPagination_Call) RunAndReturn(run func(int, int) repo.Scope) *MasterProfileRepositoryMock_WithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// WithPointFilter provides a mock function with given fields: latitude, longitude, radius
func (_m *MasterProfileRepositoryMock) WithPointFilter(latitude decimal.Decimal, longitude decimal.Decimal, radius decimal.Decimal) repo.Scope {
	ret := _m.Called(latitude, longitude, radius)

	if len(ret) == 0 {
		panic("no return value specified for WithPointFilter")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(decimal.Decimal, decimal.Decimal, decimal.Decimal) repo.Scope); ok {
		r0 = rf(latitude, longitude, radius)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithPointFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPointFilter'
type MasterProfileRepositoryMock_WithPointFilter_Call struct {
	*mock.Call
}

// WithPointFilter is a helper method to define mock.On call
//   - latitude decimal.Decimal
//   - longitude decimal.Decimal
//   - radius decimal.Decimal
func (_e *MasterProfileRepositoryMock_Expecter) WithPointFilter(latitude interface{}, longitude interface{}, radius interface{}) *MasterProfileRepositoryMock_WithPointFilter_Call {
	return &MasterProfileRepositoryMock_WithPointFilter_Call{Call: _e.mock.On("WithPointFilter", latitude, longitude, radius)}
}

func (_c *MasterProfileRepositoryMock_WithPointFilter_Call) Run(run func(latitude decimal.Decimal, longitude decimal.Decimal, radius decimal.Decimal)) *MasterProfileRepositoryMock_WithPointFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(decimal.Decimal), args[1].(decimal.Decimal), args[2].(decimal.Decimal))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPointFilter_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithPointFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPointFilter_Call) RunAndReturn(run func(decimal.Decimal, decimal.Decimal, decimal.Decimal) repo.Scope) *MasterProfileRepositoryMock_WithPointFilter_Call {
	_c.Call.Return(run)
	return _c
}

// WithPointSort provides a mock function with given fields: latitude, longitude, asc
func (_m *MasterProfileRepositoryMock) WithPointSort(latitude decimal.Decimal, longitude decimal.Decimal, asc bool) repo.Scope {
	ret := _m.Called(latitude, longitude, asc)

	if len(ret) == 0 {
		panic("no return value specified for WithPointSort")
	}

	var r0 repo.Scope
	if rf, ok := ret.Get(0).(func(decimal.Decimal, decimal.Decimal, bool) repo.Scope); ok {
		r0 = rf(latitude, longitude, asc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Scope)
		}
	}

	return r0
}

// MasterProfileRepositoryMock_WithPointSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPointSort'
type MasterProfileRepositoryMock_WithPointSort_Call struct {
	*mock.Call
}

// WithPointSort is a helper method to define mock.On call
//   - latitude decimal.Decimal
//   - longitude decimal.Decimal
//   - asc bool
func (_e *MasterProfileRepositoryMock_Expecter) WithPointSort(latitude interface{}, longitude interface{}, asc interface{}) *MasterProfileRepositoryMock_WithPointSort_Call {
	return &MasterProfileRepositoryMock_WithPointSort_Call{Call: _e.mock.On("WithPointSort", latitude, longitude, asc)}
}

func (_c *MasterProfileRepositoryMock_WithPointSort_Call) Run(run func(latitude decimal.Decimal, longitude decimal.Decimal, asc bool)) *MasterProfileRepositoryMock_WithPointSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(decimal.Decimal), args[1].(decimal.Decimal), args[2].(bool))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPointSort_Call) Return(_a0 repo.Scope) *MasterProfileRepositoryMock_WithPointSort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MasterProfileRepositoryMock_WithPointSort_Call) RunAndReturn(run func(decimal.Decimal, decimal.Decimal, bool) repo.Scope) *MasterProfileRepositoryMock_WithPointSort_Call {
	_c.Call.Return(run)
	return _c
}

// NewMasterProfileRepositoryMock creates a new instance of MasterProfileRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMasterProfileRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MasterProfileRepositoryMock {
	mock := &MasterProfileRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
