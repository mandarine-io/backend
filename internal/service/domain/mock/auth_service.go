// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"
	model "github.com/mandarine-io/backend/pkg/model/v0"

	locale "github.com/mandarine-io/backend/internal/infrastructure/locale"

	mock "github.com/stretchr/testify/mock"

	oauth "github.com/mandarine-io/backend/third_party/oauth"
)

// AuthServiceMock is an autogenerated mock type for the AuthService type
type AuthServiceMock struct {
	mock.Mock
}

type AuthServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceMock) EXPECT() *AuthServiceMock_Expecter {
	return &AuthServiceMock_Expecter{mock: &_m.Mock}
}

// FetchUserInfo provides a mock function with given fields: ctx, provider, input
func (_m *AuthServiceMock) FetchUserInfo(ctx context.Context, provider string, input model.FetchUserInfoInput) (oauth.UserInfo, error) {
	ret := _m.Called(ctx, provider, input)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserInfo")
	}

	var r0 oauth.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.FetchUserInfoInput) (oauth.UserInfo, error)); ok {
		return rf(ctx, provider, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.FetchUserInfoInput) oauth.UserInfo); ok {
		r0 = rf(ctx, provider, input)
	} else {
		r0 = ret.Get(0).(oauth.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.FetchUserInfoInput) error); ok {
		r1 = rf(ctx, provider, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_FetchUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserInfo'
type AuthServiceMock_FetchUserInfo_Call struct {
	*mock.Call
}

// FetchUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - provider string
//   - input model.FetchUserInfoInput
func (_e *AuthServiceMock_Expecter) FetchUserInfo(ctx interface{}, provider interface{}, input interface{}) *AuthServiceMock_FetchUserInfo_Call {
	return &AuthServiceMock_FetchUserInfo_Call{Call: _e.mock.On("FetchUserInfo", ctx, provider, input)}
}

func (_c *AuthServiceMock_FetchUserInfo_Call) Run(run func(ctx context.Context, provider string, input model.FetchUserInfoInput)) *AuthServiceMock_FetchUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.FetchUserInfoInput))
	})
	return _c
}

func (_c *AuthServiceMock_FetchUserInfo_Call) Return(_a0 oauth.UserInfo, _a1 error) *AuthServiceMock_FetchUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_FetchUserInfo_Call) RunAndReturn(run func(context.Context, string, model.FetchUserInfoInput) (oauth.UserInfo, error)) *AuthServiceMock_FetchUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsentPageURL provides a mock function with given fields: _a0, provider, redirectURL
func (_m *AuthServiceMock) GetConsentPageURL(_a0 context.Context, provider string, redirectURL string) (model.GetConsentPageURLOutput, error) {
	ret := _m.Called(_a0, provider, redirectURL)

	if len(ret) == 0 {
		panic("no return value specified for GetConsentPageURL")
	}

	var r0 model.GetConsentPageURLOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.GetConsentPageURLOutput, error)); ok {
		return rf(_a0, provider, redirectURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.GetConsentPageURLOutput); ok {
		r0 = rf(_a0, provider, redirectURL)
	} else {
		r0 = ret.Get(0).(model.GetConsentPageURLOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, provider, redirectURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_GetConsentPageURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsentPageURL'
type AuthServiceMock_GetConsentPageURL_Call struct {
	*mock.Call
}

// GetConsentPageURL is a helper method to define mock.On call
//   - _a0 context.Context
//   - provider string
//   - redirectURL string
func (_e *AuthServiceMock_Expecter) GetConsentPageURL(_a0 interface{}, provider interface{}, redirectURL interface{}) *AuthServiceMock_GetConsentPageURL_Call {
	return &AuthServiceMock_GetConsentPageURL_Call{Call: _e.mock.On("GetConsentPageURL", _a0, provider, redirectURL)}
}

func (_c *AuthServiceMock_GetConsentPageURL_Call) Run(run func(_a0 context.Context, provider string, redirectURL string)) *AuthServiceMock_GetConsentPageURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_GetConsentPageURL_Call) Return(_a0 model.GetConsentPageURLOutput, _a1 error) *AuthServiceMock_GetConsentPageURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_GetConsentPageURL_Call) RunAndReturn(run func(context.Context, string, string) (model.GetConsentPageURLOutput, error)) *AuthServiceMock_GetConsentPageURL_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, input
func (_m *AuthServiceMock) Login(ctx context.Context, input model.LoginInput) (model.JwtTokensOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.JwtTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginInput) (model.JwtTokensOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginInput) model.JwtTokensOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.JwtTokensOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthServiceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.LoginInput
func (_e *AuthServiceMock_Expecter) Login(ctx interface{}, input interface{}) *AuthServiceMock_Login_Call {
	return &AuthServiceMock_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *AuthServiceMock_Login_Call) Run(run func(ctx context.Context, input model.LoginInput)) *AuthServiceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.LoginInput))
	})
	return _c
}

func (_c *AuthServiceMock_Login_Call) Return(_a0 model.JwtTokensOutput, _a1 error) *AuthServiceMock_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_Login_Call) RunAndReturn(run func(context.Context, model.LoginInput) (model.JwtTokensOutput, error)) *AuthServiceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, jti
func (_m *AuthServiceMock) Logout(ctx context.Context, jti string) error {
	ret := _m.Called(ctx, jti)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthServiceMock_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - jti string
func (_e *AuthServiceMock_Expecter) Logout(ctx interface{}, jti interface{}) *AuthServiceMock_Logout_Call {
	return &AuthServiceMock_Logout_Call{Call: _e.mock.On("Logout", ctx, jti)}
}

func (_c *AuthServiceMock_Logout_Call) Run(run func(ctx context.Context, jti string)) *AuthServiceMock_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthServiceMock_Logout_Call) Return(_a0 error) *AuthServiceMock_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_Logout_Call) RunAndReturn(run func(context.Context, string) error) *AuthServiceMock_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RecoveryPassword provides a mock function with given fields: ctx, input, localizer
func (_m *AuthServiceMock) RecoveryPassword(ctx context.Context, input model.RecoveryPasswordInput, localizer locale.Localizer) error {
	ret := _m.Called(ctx, input, localizer)

	if len(ret) == 0 {
		panic("no return value specified for RecoveryPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RecoveryPasswordInput, locale.Localizer) error); ok {
		r0 = rf(ctx, input, localizer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_RecoveryPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoveryPassword'
type AuthServiceMock_RecoveryPassword_Call struct {
	*mock.Call
}

// RecoveryPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.RecoveryPasswordInput
//   - localizer locale.Localizer
func (_e *AuthServiceMock_Expecter) RecoveryPassword(ctx interface{}, input interface{}, localizer interface{}) *AuthServiceMock_RecoveryPassword_Call {
	return &AuthServiceMock_RecoveryPassword_Call{Call: _e.mock.On("RecoveryPassword", ctx, input, localizer)}
}

func (_c *AuthServiceMock_RecoveryPassword_Call) Run(run func(ctx context.Context, input model.RecoveryPasswordInput, localizer locale.Localizer)) *AuthServiceMock_RecoveryPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RecoveryPasswordInput), args[2].(locale.Localizer))
	})
	return _c
}

func (_c *AuthServiceMock_RecoveryPassword_Call) Return(_a0 error) *AuthServiceMock_RecoveryPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_RecoveryPassword_Call) RunAndReturn(run func(context.Context, model.RecoveryPasswordInput, locale.Localizer) error) *AuthServiceMock_RecoveryPassword_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokens provides a mock function with given fields: ctx, input
func (_m *AuthServiceMock) RefreshTokens(ctx context.Context, input model.RefreshTokensInput) (model.JwtTokensOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 model.JwtTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensInput) (model.JwtTokensOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensInput) model.JwtTokensOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.JwtTokensOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RefreshTokensInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_RefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokens'
type AuthServiceMock_RefreshTokens_Call struct {
	*mock.Call
}

// RefreshTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.RefreshTokensInput
func (_e *AuthServiceMock_Expecter) RefreshTokens(ctx interface{}, input interface{}) *AuthServiceMock_RefreshTokens_Call {
	return &AuthServiceMock_RefreshTokens_Call{Call: _e.mock.On("RefreshTokens", ctx, input)}
}

func (_c *AuthServiceMock_RefreshTokens_Call) Run(run func(ctx context.Context, input model.RefreshTokensInput)) *AuthServiceMock_RefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RefreshTokensInput))
	})
	return _c
}

func (_c *AuthServiceMock_RefreshTokens_Call) Return(_a0 model.JwtTokensOutput, _a1 error) *AuthServiceMock_RefreshTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_RefreshTokens_Call) RunAndReturn(run func(context.Context, model.RefreshTokensInput) (model.JwtTokensOutput, error)) *AuthServiceMock_RefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, input, localizer
func (_m *AuthServiceMock) Register(ctx context.Context, input model.RegisterInput, localizer locale.Localizer) error {
	ret := _m.Called(ctx, input, localizer)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterInput, locale.Localizer) error); ok {
		r0 = rf(ctx, input, localizer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthServiceMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.RegisterInput
//   - localizer locale.Localizer
func (_e *AuthServiceMock_Expecter) Register(ctx interface{}, input interface{}, localizer interface{}) *AuthServiceMock_Register_Call {
	return &AuthServiceMock_Register_Call{Call: _e.mock.On("Register", ctx, input, localizer)}
}

func (_c *AuthServiceMock_Register_Call) Run(run func(ctx context.Context, input model.RegisterInput, localizer locale.Localizer)) *AuthServiceMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RegisterInput), args[2].(locale.Localizer))
	})
	return _c
}

func (_c *AuthServiceMock_Register_Call) Return(_a0 error) *AuthServiceMock_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_Register_Call) RunAndReturn(run func(context.Context, model.RegisterInput, locale.Localizer) error) *AuthServiceMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterConfirm provides a mock function with given fields: ctx, input
func (_m *AuthServiceMock) RegisterConfirm(ctx context.Context, input model.RegisterConfirmInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for RegisterConfirm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterConfirmInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_RegisterConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterConfirm'
type AuthServiceMock_RegisterConfirm_Call struct {
	*mock.Call
}

// RegisterConfirm is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.RegisterConfirmInput
func (_e *AuthServiceMock_Expecter) RegisterConfirm(ctx interface{}, input interface{}) *AuthServiceMock_RegisterConfirm_Call {
	return &AuthServiceMock_RegisterConfirm_Call{Call: _e.mock.On("RegisterConfirm", ctx, input)}
}

func (_c *AuthServiceMock_RegisterConfirm_Call) Run(run func(ctx context.Context, input model.RegisterConfirmInput)) *AuthServiceMock_RegisterConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RegisterConfirmInput))
	})
	return _c
}

func (_c *AuthServiceMock_RegisterConfirm_Call) Return(_a0 error) *AuthServiceMock_RegisterConfirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_RegisterConfirm_Call) RunAndReturn(run func(context.Context, model.RegisterConfirmInput) error) *AuthServiceMock_RegisterConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterOrLogin provides a mock function with given fields: ctx, userInfo
func (_m *AuthServiceMock) RegisterOrLogin(ctx context.Context, userInfo oauth.UserInfo) (model.JwtTokensOutput, error) {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for RegisterOrLogin")
	}

	var r0 model.JwtTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth.UserInfo) (model.JwtTokensOutput, error)); ok {
		return rf(ctx, userInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth.UserInfo) model.JwtTokensOutput); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Get(0).(model.JwtTokensOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth.UserInfo) error); ok {
		r1 = rf(ctx, userInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_RegisterOrLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOrLogin'
type AuthServiceMock_RegisterOrLogin_Call struct {
	*mock.Call
}

// RegisterOrLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - userInfo oauth.UserInfo
func (_e *AuthServiceMock_Expecter) RegisterOrLogin(ctx interface{}, userInfo interface{}) *AuthServiceMock_RegisterOrLogin_Call {
	return &AuthServiceMock_RegisterOrLogin_Call{Call: _e.mock.On("RegisterOrLogin", ctx, userInfo)}
}

func (_c *AuthServiceMock_RegisterOrLogin_Call) Run(run func(ctx context.Context, userInfo oauth.UserInfo)) *AuthServiceMock_RegisterOrLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth.UserInfo))
	})
	return _c
}

func (_c *AuthServiceMock_RegisterOrLogin_Call) Return(_a0 model.JwtTokensOutput, _a1 error) *AuthServiceMock_RegisterOrLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_RegisterOrLogin_Call) RunAndReturn(run func(context.Context, oauth.UserInfo) (model.JwtTokensOutput, error)) *AuthServiceMock_RegisterOrLogin_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, input
func (_m *AuthServiceMock) ResetPassword(ctx context.Context, input model.ResetPasswordInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ResetPasswordInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type AuthServiceMock_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.ResetPasswordInput
func (_e *AuthServiceMock_Expecter) ResetPassword(ctx interface{}, input interface{}) *AuthServiceMock_ResetPassword_Call {
	return &AuthServiceMock_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, input)}
}

func (_c *AuthServiceMock_ResetPassword_Call) Run(run func(ctx context.Context, input model.ResetPasswordInput)) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ResetPasswordInput))
	})
	return _c
}

func (_c *AuthServiceMock_ResetPassword_Call) Return(_a0 error) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_ResetPassword_Call) RunAndReturn(run func(context.Context, model.ResetPasswordInput) error) *AuthServiceMock_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyRecoveryCode provides a mock function with given fields: ctx, input
func (_m *AuthServiceMock) VerifyRecoveryCode(ctx context.Context, input model.VerifyRecoveryCodeInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRecoveryCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerifyRecoveryCodeInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceMock_VerifyRecoveryCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRecoveryCode'
type AuthServiceMock_VerifyRecoveryCode_Call struct {
	*mock.Call
}

// VerifyRecoveryCode is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.VerifyRecoveryCodeInput
func (_e *AuthServiceMock_Expecter) VerifyRecoveryCode(ctx interface{}, input interface{}) *AuthServiceMock_VerifyRecoveryCode_Call {
	return &AuthServiceMock_VerifyRecoveryCode_Call{Call: _e.mock.On("VerifyRecoveryCode", ctx, input)}
}

func (_c *AuthServiceMock_VerifyRecoveryCode_Call) Run(run func(ctx context.Context, input model.VerifyRecoveryCodeInput)) *AuthServiceMock_VerifyRecoveryCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.VerifyRecoveryCodeInput))
	})
	return _c
}

func (_c *AuthServiceMock_VerifyRecoveryCode_Call) Return(_a0 error) *AuthServiceMock_VerifyRecoveryCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceMock_VerifyRecoveryCode_Call) RunAndReturn(run func(context.Context, model.VerifyRecoveryCodeInput) error) *AuthServiceMock_VerifyRecoveryCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceMock creates a new instance of AuthServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceMock {
	mock := &AuthServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
