// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"
	model "github.com/mandarine-io/backend/pkg/model/v0"

	language "golang.org/x/text/language"

	mock "github.com/stretchr/testify/mock"
)

// GeocodingServiceMock is an autogenerated mock type for the GeocodingService type
type GeocodingServiceMock struct {
	mock.Mock
}

type GeocodingServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GeocodingServiceMock) EXPECT() *GeocodingServiceMock_Expecter {
	return &GeocodingServiceMock_Expecter{mock: &_m.Mock}
}

// Geocode provides a mock function with given fields: ctx, input, lang
func (_m *GeocodingServiceMock) Geocode(ctx context.Context, input model.GeocodingInput, lang language.Tag) (model.GeocodingOutput, error) {
	ret := _m.Called(ctx, input, lang)

	if len(ret) == 0 {
		panic("no return value specified for Geocode")
	}

	var r0 model.GeocodingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GeocodingInput, language.Tag) (model.GeocodingOutput, error)); ok {
		return rf(ctx, input, lang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GeocodingInput, language.Tag) model.GeocodingOutput); ok {
		r0 = rf(ctx, input, lang)
	} else {
		r0 = ret.Get(0).(model.GeocodingOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GeocodingInput, language.Tag) error); ok {
		r1 = rf(ctx, input, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeocodingServiceMock_Geocode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Geocode'
type GeocodingServiceMock_Geocode_Call struct {
	*mock.Call
}

// Geocode is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.GeocodingInput
//   - lang language.Tag
func (_e *GeocodingServiceMock_Expecter) Geocode(ctx interface{}, input interface{}, lang interface{}) *GeocodingServiceMock_Geocode_Call {
	return &GeocodingServiceMock_Geocode_Call{Call: _e.mock.On("Geocode", ctx, input, lang)}
}

func (_c *GeocodingServiceMock_Geocode_Call) Run(run func(ctx context.Context, input model.GeocodingInput, lang language.Tag)) *GeocodingServiceMock_Geocode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GeocodingInput), args[2].(language.Tag))
	})
	return _c
}

func (_c *GeocodingServiceMock_Geocode_Call) Return(_a0 model.GeocodingOutput, _a1 error) *GeocodingServiceMock_Geocode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeocodingServiceMock_Geocode_Call) RunAndReturn(run func(context.Context, model.GeocodingInput, language.Tag) (model.GeocodingOutput, error)) *GeocodingServiceMock_Geocode_Call {
	_c.Call.Return(run)
	return _c
}

// ReverseGeocode provides a mock function with given fields: ctx, input, lang
func (_m *GeocodingServiceMock) ReverseGeocode(ctx context.Context, input model.ReverseGeocodingInput, lang language.Tag) (model.ReverseGeocodingOutput, error) {
	ret := _m.Called(ctx, input, lang)

	if len(ret) == 0 {
		panic("no return value specified for ReverseGeocode")
	}

	var r0 model.ReverseGeocodingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ReverseGeocodingInput, language.Tag) (model.ReverseGeocodingOutput, error)); ok {
		return rf(ctx, input, lang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.ReverseGeocodingInput, language.Tag) model.ReverseGeocodingOutput); ok {
		r0 = rf(ctx, input, lang)
	} else {
		r0 = ret.Get(0).(model.ReverseGeocodingOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.ReverseGeocodingInput, language.Tag) error); ok {
		r1 = rf(ctx, input, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeocodingServiceMock_ReverseGeocode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReverseGeocode'
type GeocodingServiceMock_ReverseGeocode_Call struct {
	*mock.Call
}

// ReverseGeocode is a helper method to define mock.On call
//   - ctx context.Context
//   - input model.ReverseGeocodingInput
//   - lang language.Tag
func (_e *GeocodingServiceMock_Expecter) ReverseGeocode(ctx interface{}, input interface{}, lang interface{}) *GeocodingServiceMock_ReverseGeocode_Call {
	return &GeocodingServiceMock_ReverseGeocode_Call{Call: _e.mock.On("ReverseGeocode", ctx, input, lang)}
}

func (_c *GeocodingServiceMock_ReverseGeocode_Call) Run(run func(ctx context.Context, input model.ReverseGeocodingInput, lang language.Tag)) *GeocodingServiceMock_ReverseGeocode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ReverseGeocodingInput), args[2].(language.Tag))
	})
	return _c
}

func (_c *GeocodingServiceMock_ReverseGeocode_Call) Return(_a0 model.ReverseGeocodingOutput, _a1 error) *GeocodingServiceMock_ReverseGeocode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeocodingServiceMock_ReverseGeocode_Call) RunAndReturn(run func(context.Context, model.ReverseGeocodingInput, language.Tag) (model.ReverseGeocodingOutput, error)) *GeocodingServiceMock_ReverseGeocode_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeocodingServiceMock creates a new instance of GeocodingServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeocodingServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeocodingServiceMock {
	mock := &GeocodingServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
