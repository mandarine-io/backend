// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	model "github.com/mandarine-io/backend/pkg/model/health"
	mock "github.com/stretchr/testify/mock"
)

// HealthServiceMock is an autogenerated mock type for the HealthService type
type HealthServiceMock struct {
	mock.Mock
}

type HealthServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthServiceMock) EXPECT() *HealthServiceMock_Expecter {
	return &HealthServiceMock_Expecter{mock: &_m.Mock}
}

// Health provides a mock function with no fields
func (_m *HealthServiceMock) Health() []model.HealthOutput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 []model.HealthOutput
	if rf, ok := ret.Get(0).(func() []model.HealthOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.HealthOutput)
		}
	}

	return r0
}

// HealthServiceMock_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type HealthServiceMock_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *HealthServiceMock_Expecter) Health() *HealthServiceMock_Health_Call {
	return &HealthServiceMock_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *HealthServiceMock_Health_Call) Run(run func()) *HealthServiceMock_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HealthServiceMock_Health_Call) Return(_a0 []model.HealthOutput) *HealthServiceMock_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealthServiceMock_Health_Call) RunAndReturn(run func() []model.HealthOutput) *HealthServiceMock_Health_Call {
	_c.Call.Return(run)
	return _c
}

// NewHealthServiceMock creates a new instance of HealthServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthServiceMock {
	mock := &HealthServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
