// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	http "net/http"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// WebsocketServiceMock is an autogenerated mock type for the WebsocketService type
type WebsocketServiceMock struct {
	mock.Mock
}

type WebsocketServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WebsocketServiceMock) EXPECT() *WebsocketServiceMock_Expecter {
	return &WebsocketServiceMock_Expecter{mock: &_m.Mock}
}

// RegisterClient provides a mock function with given fields: userID, r, w
func (_m *WebsocketServiceMock) RegisterClient(userID uuid.UUID, r *http.Request, w http.ResponseWriter) error {
	ret := _m.Called(userID, r, w)

	if len(ret) == 0 {
		panic("no return value specified for RegisterClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *http.Request, http.ResponseWriter) error); ok {
		r0 = rf(userID, r, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebsocketServiceMock_RegisterClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterClient'
type WebsocketServiceMock_RegisterClient_Call struct {
	*mock.Call
}

// RegisterClient is a helper method to define mock.On call
//   - userID uuid.UUID
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *WebsocketServiceMock_Expecter) RegisterClient(userID interface{}, r interface{}, w interface{}) *WebsocketServiceMock_RegisterClient_Call {
	return &WebsocketServiceMock_RegisterClient_Call{Call: _e.mock.On("RegisterClient", userID, r, w)}
}

func (_c *WebsocketServiceMock_RegisterClient_Call) Run(run func(userID uuid.UUID, r *http.Request, w http.ResponseWriter)) *WebsocketServiceMock_RegisterClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(*http.Request), args[2].(http.ResponseWriter))
	})
	return _c
}

func (_c *WebsocketServiceMock_RegisterClient_Call) Return(_a0 error) *WebsocketServiceMock_RegisterClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebsocketServiceMock_RegisterClient_Call) RunAndReturn(run func(uuid.UUID, *http.Request, http.ResponseWriter) error) *WebsocketServiceMock_RegisterClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebsocketServiceMock creates a new instance of WebsocketServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsocketServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsocketServiceMock {
	mock := &WebsocketServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
