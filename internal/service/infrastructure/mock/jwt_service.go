// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/mandarine-io/backend/internal/persistence/entity"
	infrastructure "github.com/mandarine-io/backend/internal/service/infrastructure"

	mock "github.com/stretchr/testify/mock"
)

// JWTServiceMock is an autogenerated mock type for the JWTService type
type JWTServiceMock struct {
	mock.Mock
}

type JWTServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTServiceMock) EXPECT() *JWTServiceMock_Expecter {
	return &JWTServiceMock_Expecter{mock: &_m.Mock}
}

// BanToken provides a mock function with given fields: ctx, jti
func (_m *JWTServiceMock) BanToken(ctx context.Context, jti string) error {
	ret := _m.Called(ctx, jti)

	if len(ret) == 0 {
		panic("no return value specified for BanToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JWTServiceMock_BanToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanToken'
type JWTServiceMock_BanToken_Call struct {
	*mock.Call
}

// BanToken is a helper method to define mock.On call
//   - ctx context.Context
//   - jti string
func (_e *JWTServiceMock_Expecter) BanToken(ctx interface{}, jti interface{}) *JWTServiceMock_BanToken_Call {
	return &JWTServiceMock_BanToken_Call{Call: _e.mock.On("BanToken", ctx, jti)}
}

func (_c *JWTServiceMock_BanToken_Call) Run(run func(ctx context.Context, jti string)) *JWTServiceMock_BanToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JWTServiceMock_BanToken_Call) Return(_a0 error) *JWTServiceMock_BanToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JWTServiceMock_BanToken_Call) RunAndReturn(run func(context.Context, string) error) *JWTServiceMock_BanToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateTokens provides a mock function with given fields: ctx, userEntity
func (_m *JWTServiceMock) GenerateTokens(ctx context.Context, userEntity *entity.User) (string, string, error) {
	ret := _m.Called(ctx, userEntity)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) (string, string, error)); ok {
		return rf(ctx, userEntity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) string); ok {
		r0 = rf(ctx, userEntity)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) string); ok {
		r1 = rf(ctx, userEntity)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entity.User) error); ok {
		r2 = rf(ctx, userEntity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JWTServiceMock_GenerateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokens'
type JWTServiceMock_GenerateTokens_Call struct {
	*mock.Call
}

// GenerateTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - userEntity *entity.User
func (_e *JWTServiceMock_Expecter) GenerateTokens(ctx interface{}, userEntity interface{}) *JWTServiceMock_GenerateTokens_Call {
	return &JWTServiceMock_GenerateTokens_Call{Call: _e.mock.On("GenerateTokens", ctx, userEntity)}
}

func (_c *JWTServiceMock_GenerateTokens_Call) Run(run func(ctx context.Context, userEntity *entity.User)) *JWTServiceMock_GenerateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *JWTServiceMock_GenerateTokens_Call) Return(_a0 string, _a1 string, _a2 error) *JWTServiceMock_GenerateTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JWTServiceMock_GenerateTokens_Call) RunAndReturn(run func(context.Context, *entity.User) (string, string, error)) *JWTServiceMock_GenerateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessTokenClaims provides a mock function with given fields: ctx, token
func (_m *JWTServiceMock) GetAccessTokenClaims(ctx context.Context, token string) (infrastructure.AccessTokenClaims, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessTokenClaims")
	}

	var r0 infrastructure.AccessTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (infrastructure.AccessTokenClaims, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) infrastructure.AccessTokenClaims); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(infrastructure.AccessTokenClaims)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTServiceMock_GetAccessTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessTokenClaims'
type JWTServiceMock_GetAccessTokenClaims_Call struct {
	*mock.Call
}

// GetAccessTokenClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *JWTServiceMock_Expecter) GetAccessTokenClaims(ctx interface{}, token interface{}) *JWTServiceMock_GetAccessTokenClaims_Call {
	return &JWTServiceMock_GetAccessTokenClaims_Call{Call: _e.mock.On("GetAccessTokenClaims", ctx, token)}
}

func (_c *JWTServiceMock_GetAccessTokenClaims_Call) Run(run func(ctx context.Context, token string)) *JWTServiceMock_GetAccessTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JWTServiceMock_GetAccessTokenClaims_Call) Return(_a0 infrastructure.AccessTokenClaims, _a1 error) *JWTServiceMock_GetAccessTokenClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTServiceMock_GetAccessTokenClaims_Call) RunAndReturn(run func(context.Context, string) (infrastructure.AccessTokenClaims, error)) *JWTServiceMock_GetAccessTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenClaims provides a mock function with given fields: ctx, token
func (_m *JWTServiceMock) GetRefreshTokenClaims(ctx context.Context, token string) (infrastructure.RefreshTokenClaims, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenClaims")
	}

	var r0 infrastructure.RefreshTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (infrastructure.RefreshTokenClaims, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) infrastructure.RefreshTokenClaims); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(infrastructure.RefreshTokenClaims)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTServiceMock_GetRefreshTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenClaims'
type JWTServiceMock_GetRefreshTokenClaims_Call struct {
	*mock.Call
}

// GetRefreshTokenClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *JWTServiceMock_Expecter) GetRefreshTokenClaims(ctx interface{}, token interface{}) *JWTServiceMock_GetRefreshTokenClaims_Call {
	return &JWTServiceMock_GetRefreshTokenClaims_Call{Call: _e.mock.On("GetRefreshTokenClaims", ctx, token)}
}

func (_c *JWTServiceMock_GetRefreshTokenClaims_Call) Run(run func(ctx context.Context, token string)) *JWTServiceMock_GetRefreshTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JWTServiceMock_GetRefreshTokenClaims_Call) Return(_a0 infrastructure.RefreshTokenClaims, _a1 error) *JWTServiceMock_GetRefreshTokenClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTServiceMock_GetRefreshTokenClaims_Call) RunAndReturn(run func(context.Context, string) (infrastructure.RefreshTokenClaims, error)) *JWTServiceMock_GetRefreshTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetTypeToken provides a mock function with given fields: ctx, token
func (_m *JWTServiceMock) GetTypeToken(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetTypeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTServiceMock_GetTypeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTypeToken'
type JWTServiceMock_GetTypeToken_Call struct {
	*mock.Call
}

// GetTypeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *JWTServiceMock_Expecter) GetTypeToken(ctx interface{}, token interface{}) *JWTServiceMock_GetTypeToken_Call {
	return &JWTServiceMock_GetTypeToken_Call{Call: _e.mock.On("GetTypeToken", ctx, token)}
}

func (_c *JWTServiceMock_GetTypeToken_Call) Run(run func(ctx context.Context, token string)) *JWTServiceMock_GetTypeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JWTServiceMock_GetTypeToken_Call) Return(_a0 string, _a1 error) *JWTServiceMock_GetTypeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTServiceMock_GetTypeToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *JWTServiceMock_GetTypeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTServiceMock creates a new instance of JWTServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTServiceMock {
	mock := &JWTServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
