// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OTPServiceMock is an autogenerated mock type for the OTPService type
type OTPServiceMock struct {
	mock.Mock
}

type OTPServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OTPServiceMock) EXPECT() *OTPServiceMock_Expecter {
	return &OTPServiceMock_Expecter{mock: &_m.Mock}
}

// DeleteDataByCode provides a mock function with given fields: ctx, prefix, code
func (_m *OTPServiceMock) DeleteDataByCode(ctx context.Context, prefix string, code string) error {
	ret := _m.Called(ctx, prefix, code)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataByCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, prefix, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPServiceMock_DeleteDataByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataByCode'
type OTPServiceMock_DeleteDataByCode_Call struct {
	*mock.Call
}

// DeleteDataByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
//   - code string
func (_e *OTPServiceMock_Expecter) DeleteDataByCode(ctx interface{}, prefix interface{}, code interface{}) *OTPServiceMock_DeleteDataByCode_Call {
	return &OTPServiceMock_DeleteDataByCode_Call{Call: _e.mock.On("DeleteDataByCode", ctx, prefix, code)}
}

func (_c *OTPServiceMock_DeleteDataByCode_Call) Run(run func(ctx context.Context, prefix string, code string)) *OTPServiceMock_DeleteDataByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OTPServiceMock_DeleteDataByCode_Call) Return(_a0 error) *OTPServiceMock_DeleteDataByCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPServiceMock_DeleteDataByCode_Call) RunAndReturn(run func(context.Context, string, string) error) *OTPServiceMock_DeleteDataByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAndSaveWithCode provides a mock function with given fields: ctx, prefix, data
func (_m *OTPServiceMock) GenerateAndSaveWithCode(ctx context.Context, prefix string, data any) (string, error) {
	ret := _m.Called(ctx, prefix, data)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAndSaveWithCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any) (string, error)); ok {
		return rf(ctx, prefix, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, any) string); ok {
		r0 = rf(ctx, prefix, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = rf(ctx, prefix, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OTPServiceMock_GenerateAndSaveWithCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAndSaveWithCode'
type OTPServiceMock_GenerateAndSaveWithCode_Call struct {
	*mock.Call
}

// GenerateAndSaveWithCode is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
//   - data any
func (_e *OTPServiceMock_Expecter) GenerateAndSaveWithCode(ctx interface{}, prefix interface{}, data interface{}) *OTPServiceMock_GenerateAndSaveWithCode_Call {
	return &OTPServiceMock_GenerateAndSaveWithCode_Call{Call: _e.mock.On("GenerateAndSaveWithCode", ctx, prefix, data)}
}

func (_c *OTPServiceMock_GenerateAndSaveWithCode_Call) Run(run func(ctx context.Context, prefix string, data any)) *OTPServiceMock_GenerateAndSaveWithCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *OTPServiceMock_GenerateAndSaveWithCode_Call) Return(_a0 string, _a1 error) *OTPServiceMock_GenerateAndSaveWithCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OTPServiceMock_GenerateAndSaveWithCode_Call) RunAndReturn(run func(context.Context, string, any) (string, error)) *OTPServiceMock_GenerateAndSaveWithCode_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCode provides a mock function with given fields: ctx
func (_m *OTPServiceMock) GenerateCode(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OTPServiceMock_GenerateCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCode'
type OTPServiceMock_GenerateCode_Call struct {
	*mock.Call
}

// GenerateCode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OTPServiceMock_Expecter) GenerateCode(ctx interface{}) *OTPServiceMock_GenerateCode_Call {
	return &OTPServiceMock_GenerateCode_Call{Call: _e.mock.On("GenerateCode", ctx)}
}

func (_c *OTPServiceMock_GenerateCode_Call) Run(run func(ctx context.Context)) *OTPServiceMock_GenerateCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OTPServiceMock_GenerateCode_Call) Return(_a0 string, _a1 error) *OTPServiceMock_GenerateCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OTPServiceMock_GenerateCode_Call) RunAndReturn(run func(context.Context) (string, error)) *OTPServiceMock_GenerateCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataByCode provides a mock function with given fields: ctx, prefix, code, data
func (_m *OTPServiceMock) GetDataByCode(ctx context.Context, prefix string, code string, data any) error {
	ret := _m.Called(ctx, prefix, code, data)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, any) error); ok {
		r0 = rf(ctx, prefix, code, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPServiceMock_GetDataByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataByCode'
type OTPServiceMock_GetDataByCode_Call struct {
	*mock.Call
}

// GetDataByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
//   - code string
//   - data any
func (_e *OTPServiceMock_Expecter) GetDataByCode(ctx interface{}, prefix interface{}, code interface{}, data interface{}) *OTPServiceMock_GetDataByCode_Call {
	return &OTPServiceMock_GetDataByCode_Call{Call: _e.mock.On("GetDataByCode", ctx, prefix, code, data)}
}

func (_c *OTPServiceMock_GetDataByCode_Call) Run(run func(ctx context.Context, prefix string, code string, data any)) *OTPServiceMock_GetDataByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(any))
	})
	return _c
}

func (_c *OTPServiceMock_GetDataByCode_Call) Return(_a0 error) *OTPServiceMock_GetDataByCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPServiceMock_GetDataByCode_Call) RunAndReturn(run func(context.Context, string, string, any) error) *OTPServiceMock_GetDataByCode_Call {
	_c.Call.Return(run)
	return _c
}

// SaveWithCode provides a mock function with given fields: ctx, prefix, code, data
func (_m *OTPServiceMock) SaveWithCode(ctx context.Context, prefix string, code string, data any) error {
	ret := _m.Called(ctx, prefix, code, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveWithCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, any) error); ok {
		r0 = rf(ctx, prefix, code, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTPServiceMock_SaveWithCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWithCode'
type OTPServiceMock_SaveWithCode_Call struct {
	*mock.Call
}

// SaveWithCode is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
//   - code string
//   - data any
func (_e *OTPServiceMock_Expecter) SaveWithCode(ctx interface{}, prefix interface{}, code interface{}, data interface{}) *OTPServiceMock_SaveWithCode_Call {
	return &OTPServiceMock_SaveWithCode_Call{Call: _e.mock.On("SaveWithCode", ctx, prefix, code, data)}
}

func (_c *OTPServiceMock_SaveWithCode_Call) Run(run func(ctx context.Context, prefix string, code string, data any)) *OTPServiceMock_SaveWithCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(any))
	})
	return _c
}

func (_c *OTPServiceMock_SaveWithCode_Call) Return(_a0 error) *OTPServiceMock_SaveWithCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTPServiceMock_SaveWithCode_Call) RunAndReturn(run func(context.Context, string, string, any) error) *OTPServiceMock_SaveWithCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewOTPServiceMock creates a new instance of OTPServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPServiceMock {
	mock := &OTPServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
