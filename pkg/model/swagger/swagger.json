{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API for web and mobile application Mandarine",
        "title": "Mandarine API",
        "contact": {
            "name": "Mandarine Support",
            "email": "mandarine.app@yandex.ru"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.0.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/health": {
            "get": {
                "description": "Request for getting health. Alias healthReadiness",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics API"
                ],
                "summary": "Health",
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/health.HealthOutput"
                            }
                        }
                    }
                }
            }
        },
        "/health/liveness": {
            "get": {
                "description": "Request for getting health liveness.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics API"
                ],
                "summary": "Health liveness",
                "operationId": "healthLiveness",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/health/readiness": {
            "get": {
                "description": "Request for getting health readiness. In response will be status of all check (database, s3, smtp, cache, pubsub).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics API"
                ],
                "summary": "Health readiness",
                "operationId": "healthReadiness",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/health.HealthOutput"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v0.ErrorOutput"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/prometheus": {
            "get": {
                "description": "Request for getting Prometheus metrics",
                "produces": [
                    "text/plain; charset=utf-8"
                ],
                "tags": [
                    "Metrics API"
                ],
                "summary": "Metrics in Prometheus format",
                "operationId": "metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/swagger/api-docs.json": {
            "get": {
                "description": "Request for getting swagger specification in JSON",
                "produces": [
                    "application/json; charset=utf-8"
                ],
                "tags": [
                    "Swagger API"
                ],
                "summary": "Swagger JSON",
                "operationId": "SwaggerJSON",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/swagger/api-docs.yaml": {
            "get": {
                "description": "Request for getting swagger specification in YAML",
                "produces": [
                    "application/yaml; charset=utf-8"
                ],
                "tags": [
                    "Swagger API"
                ],
                "summary": "Swagger YAML",
                "operationId": "SwaggerYAML",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/swagger/index.html": {
            "get": {
                "description": "Request for getting swagger UI",
                "produces": [
                    "text/html; charset=utf-8"
                ],
                "tags": [
                    "Swagger API"
                ],
                "summary": "Swagger UI",
                "operationId": "SwaggerUI",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v0/account": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for receiving own domain. User must be logged in. In response will be returned own service info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Get service",
                "operationId": "GetAccount",
                "responses": {
                    "200": {
                        "description": "Account info",
                        "schema": {
                            "$ref": "#/definitions/v0.AccountOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for deleting domain. User must be logged in. User must not be deleted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Delete service",
                "operationId": "DeleteAccount",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "User is deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/account/email": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for updating email. User must be logged in. In process will be sent verification email. In response will be returned updated service info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Update email",
                "operationId": "UpdateEmail",
                "parameters": [
                    {
                        "description": "Update email request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.UpdateEmailInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account info (email is verified)",
                        "schema": {
                            "$ref": "#/definitions/v0.AccountOutput"
                        }
                    },
                    "202": {
                        "description": "Account info (email is not verified)",
                        "schema": {
                            "$ref": "#/definitions/v0.AccountOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "Duplicate email",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/account/email/verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for verify email. User must be logged in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Verify email",
                "operationId": "VerifyEmail",
                "parameters": [
                    {
                        "description": "Verify email request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.VerifyEmailInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/account/password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for setting password. User must be logged in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Set password",
                "operationId": "SetPassword",
                "parameters": [
                    {
                        "description": "Set password request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.SetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "Password is set",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for updating password. User must be logged in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Update password",
                "operationId": "UpdatePassword",
                "parameters": [
                    {
                        "description": "Update password request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.UpdatePasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/account/restore": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for restoring domain. User must be logged in. User must be deleted. In response will be returned restored service info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Restore service",
                "operationId": "RestoreAccount",
                "responses": {
                    "200": {
                        "description": "Account info",
                        "schema": {
                            "$ref": "#/definitions/v0.AccountOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "User is not deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/account/username": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for updating username. User must be logged in. In response will be returned updated service info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account API"
                ],
                "summary": "Update username",
                "operationId": "UpdateUsername",
                "parameters": [
                    {
                        "description": "Update username request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.UpdateUsernameInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account info",
                        "schema": {
                            "$ref": "#/definitions/v0.AccountOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "Duplicate username",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/login": {
            "post": {
                "description": "Request for serviceentication. In response will be new access token in body and new refresh tokens in http-only cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Sign in",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/v0.JwtTokensOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/logout": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for logout. User must be logged in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Logout",
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/recovery-password": {
            "post": {
                "description": "Request for recovery password. At the end will be sent email with code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Recovery password",
                "operationId": "RecoveryPassword",
                "parameters": [
                    {
                        "description": "Recovery password body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.RecoveryPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/recovery-password/verify": {
            "post": {
                "description": "Request for verify recovery code. If code is correct will be sent status 200",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Verify recovery code",
                "operationId": "VerifyRecoveryCode",
                "parameters": [
                    {
                        "description": "Verify recovery code body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.VerifyRecoveryCodeInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/refresh": {
            "post": {
                "description": "Request for refreshing tokens. In response will be new access token in body and new refresh tokens in http-only cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Refresh tokens",
                "operationId": "RefreshTokens",
                "parameters": [
                    {
                        "description": "Refresh token body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.RefreshTokensInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/v0.JwtTokensOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/register": {
            "post": {
                "description": "Request for creating new user. At the end will be sent confirmation email with code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Register",
                "operationId": "Register",
                "parameters": [
                    {
                        "description": "Register request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/register/confirm": {
            "post": {
                "description": "Request for confirming registration. At the end will be created new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Register confirmation",
                "operationId": "RegisterConfirm",
                "parameters": [
                    {
                        "description": "Register confirm body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.RegisterConfirmInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/reset-password": {
            "post": {
                "description": "Request for reset password. If code is correct will be updated password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Reset password",
                "operationId": "ResetPassword",
                "parameters": [
                    {
                        "description": "Reset password body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.ResetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/social/{provider}": {
            "get": {
                "description": "Request for redirecting to OAuth consent page. After serviceorization, it will redirect to redirectURL with serviceorization code and state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Social login",
                "operationId": "SocialLogin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Social login provider (yandex, google, mailru)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Redirect URL",
                        "name": "redirectURL",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found"
                    },
                    "404": {
                        "description": "Provider not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/auth/social/{provider}/callback": {
            "post": {
                "description": "Request for exchanging serviceorization code to token pairs. In process, it will exchange code to user info and register new user or login existing user. In response will be new access token in body and new refresh tokens in http-only cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication and Authorization API"
                ],
                "summary": "Social login callback",
                "operationId": "SocialLoginCallback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Social login provider (yandex, google, mailru)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Social login callback request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.SocialLoginCallbackInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/v0.JwtTokensOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/geocode/forward": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for geocoding. User must be logged in. In response will be returned coordinates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geocoding API"
                ],
                "summary": "Geocode",
                "operationId": "Geocode",
                "parameters": [
                    {
                        "type": "string",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Geocoded coordinates",
                        "schema": {
                            "$ref": "#/definitions/v0.GeocodingOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "503": {
                        "description": "Geocoding service is unavailable",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/geocode/reverse": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for reverse geocoding. User must be logged in. In response will be returned address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Geocoding API"
                ],
                "summary": "Reverse geocode",
                "operationId": "ReverseGeocode",
                "parameters": [
                    {
                        "type": "number",
                        "format": "decimal",
                        "name": "lat",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "decimal",
                        "name": "lng",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reverse geocoded address",
                        "schema": {
                            "$ref": "#/definitions/v0.ReverseGeocodingOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "503": {
                        "description": "Geocoding service is unavailable",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/masters/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for finding master profiles. User must be logged in. In response will be returned found master profiles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Profile API"
                ],
                "summary": "Find master profiles",
                "operationId": "FindMasterProfiles",
                "parameters": [
                    {
                        "type": "string",
                        "name": "displayName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "job",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "decimal",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "decimal",
                        "name": "lng",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "decimal",
                        "name": "radius",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found master profiles",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterProfilesOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for creating master profile. User must be logged in. In response will be returned created master profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Profile API"
                ],
                "summary": "Create master profile",
                "operationId": "CreateMasterProfile",
                "parameters": [
                    {
                        "description": "Create master profile request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.CreateMasterProfileInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterProfileOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "409": {
                        "description": "Master profile already exists",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for updating master profile. User must be logged in. In response will be returned updated master profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Profile API"
                ],
                "summary": "Update master profile",
                "operationId": "UpdateMasterProfile",
                "parameters": [
                    {
                        "description": "Update master profile request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.UpdateMasterProfileInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterProfileOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/masters/profiles/-/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for finding master services. User must be logged in. In response will be returned found master services.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Find master services",
                "operationId": "FindMasterServices",
                "parameters": [
                    {
                        "type": "string",
                        "name": "field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "maxInterval",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "maxPrice",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "minInterval",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "minPrice",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found master services",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterServicesOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/masters/profiles/{username}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for getting master profile. User must be logged in. In response will be returned found master profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Profile API"
                ],
                "summary": "Get master profile",
                "operationId": "GetMasterProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterProfileOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Own master profile is disabled",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/masters/profiles/{username}/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for finding master services by username. User must be logged in. In response will be returned found master services.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Find master services by username",
                "operationId": "FindMasterServicesByUsername",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "maxInterval",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "maxPrice",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "minInterval",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "minPrice",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found master services",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterServicesOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Master profile is disabled",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for creating master service. User must be logged in. In response will be returned created master service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Create master service",
                "operationId": "CreateMasterService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create master service request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.CreateMasterServiceInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created master service",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterServiceOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Master profile is disabled; Cannot create master service for another master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master service not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/masters/profiles/{username}/services/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for getting master service. User must be logged in. In response will be returned found master service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Get master service",
                "operationId": "GetMasterServiceByUsername",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Master profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found master service",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterServiceOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Master profile is disabled",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master service not found; Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for deleting master service. User must be logged in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Delete master service",
                "operationId": "DeleteMasterService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Master service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Master profile is disabled; Cannot delete master service for another master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master service not found; Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for updating master service. User must be logged in. In response will be returned updated master service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Master Service API"
                ],
                "summary": "Update master service",
                "operationId": "UpdateMasterService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Master service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update master service request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v0.UpdateMasterServiceInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated master service",
                        "schema": {
                            "$ref": "#/definitions/v0.MasterServiceOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted; Master profile is disabled; Cannot update master service for another master profile",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "404": {
                        "description": "Master service not found; Master profile not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/resources/many": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for uploading resources. Return the array of object ids in S3 storage for successful uploaded files.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource API"
                ],
                "summary": "Upload resources",
                "operationId": "UploadResources",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Files to upload",
                        "name": "resources",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Uploaded resources",
                        "schema": {
                            "$ref": "#/definitions/v0.UploadResourcesOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/resources/one": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for uploading resource. Return the object id in S3 storage.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource API"
                ],
                "summary": "Upload resource",
                "operationId": "UploadResource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File to upload",
                        "name": "resource",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Uploaded resource",
                        "schema": {
                            "$ref": "#/definitions/v0.UploadResourceOutput"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "403": {
                        "description": "User is blocked or deleted",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/resources/{objectID}": {
            "get": {
                "description": "Request for getting resource. Return the resource in S3 storage.",
                "tags": [
                    "Resource API"
                ],
                "summary": "Download resource",
                "operationId": "DownloadResource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object id",
                        "name": "objectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        },
        "/v0/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request for connect to websocket server. If pool is not full, a new websocket connection is created.",
                "tags": [
                    "Websocket API"
                ],
                "summary": "Connect to websocket server",
                "operationId": "WsConnect",
                "responses": {
                    "101": {
                        "description": "Switching Protocols"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/v0.ErrorOutput"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "health.HealthOutput": {
            "type": "object",
            "required": [
                "name",
                "pass"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "pass": {
                    "type": "boolean"
                }
            }
        },
        "v0.AccountOutput": {
            "type": "object",
            "required": [
                "email",
                "isDeleted",
                "isEmailVerified",
                "isEnabled",
                "isPasswordTemp",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "isPasswordTemp": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "v0.AddressOutput": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "county": {
                    "type": "string"
                },
                "formattedAddress": {
                    "type": "string"
                },
                "houseNumber": {
                    "type": "string"
                },
                "postcode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "stateCode": {
                    "type": "string"
                },
                "stateDistrict": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "suburb": {
                    "type": "string"
                }
            }
        },
        "v0.CreateMasterProfileInput": {
            "type": "object",
            "required": [
                "displayName",
                "job",
                "latitude",
                "longitude"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "decimal"
                },
                "longitude": {
                    "type": "number",
                    "format": "decimal"
                }
            }
        },
        "v0.CreateMasterServiceInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "maxInterval": {
                    "type": "string",
                    "format": "hh:mm:ss"
                },
                "maxPrice": {
                    "type": "number"
                },
                "minInterval": {
                    "type": "string",
                    "format": "hh:mm:ss"
                },
                "minPrice": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v0.ErrorOutput": {
            "type": "object",
            "required": [
                "message",
                "path",
                "status",
                "timestamp"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "format": "url_path",
                    "example": "/api/v0/example"
                },
                "status": {
                    "type": "integer",
                    "maximum": 599,
                    "minimum": 400
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "v0.GeocodingOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v0.PointOutput"
                    }
                }
            }
        },
        "v0.JwtTokensOutput": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string",
                    "format": "jwt"
                },
                "refreshToken": {
                    "type": "string",
                    "format": "jwt"
                }
            }
        },
        "v0.LoginInput": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v0.MasterProfileOutput": {
            "type": "object",
            "required": [
                "displayName",
                "job",
                "point"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "job": {
                    "type": "string"
                },
                "point": {
                    "$ref": "#/definitions/v0.PointOutput"
                }
            }
        },
        "v0.MasterProfilesOutput": {
            "type": "object",
            "required": [
                "count",
                "data"
            ],
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v0.MasterProfileOutput"
                    }
                }
            }
        },
        "v0.MasterServiceOutput": {
            "type": "object",
            "properties": {
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxInterval": {
                    "type": "string"
                },
                "maxPrice": {
                    "type": "number"
                },
                "minInterval": {
                    "type": "string"
                },
                "minPrice": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v0.MasterServicesOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v0.MasterServiceOutput"
                    }
                }
            }
        },
        "v0.PointOutput": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "v0.RecoveryPasswordInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                }
            }
        },
        "v0.RefreshTokensInput": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "format": "jwt"
                }
            }
        },
        "v0.RegisterConfirmInput": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "v0.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "format": "zxcvbn"
                },
                "username": {
                    "type": "string",
                    "format": "username"
                }
            }
        },
        "v0.ResetPasswordInput": {
            "type": "object",
            "required": [
                "email",
                "otp",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "format": "zxcvbn"
                }
            }
        },
        "v0.ReverseGeocodingOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v0.AddressOutput"
                    }
                }
            }
        },
        "v0.SetPasswordInput": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "format": "zxcvbn"
                }
            }
        },
        "v0.SocialLoginCallbackInput": {
            "type": "object",
            "required": [
                "code",
                "state"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "v0.UpdateEmailInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                }
            }
        },
        "v0.UpdateMasterProfileInput": {
            "type": "object",
            "required": [
                "displayName",
                "job",
                "latitude",
                "longitude"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "decimal"
                },
                "longitude": {
                    "type": "number",
                    "format": "decimal"
                }
            }
        },
        "v0.UpdateMasterServiceInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "avatarId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "maxInterval": {
                    "type": "string",
                    "format": "hh:mm:ss"
                },
                "maxPrice": {
                    "type": "number"
                },
                "minInterval": {
                    "type": "string",
                    "format": "hh:mm:ss"
                },
                "minPrice": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v0.UpdatePasswordInput": {
            "type": "object",
            "required": [
                "newPassword",
                "oldPassword"
            ],
            "properties": {
                "newPassword": {
                    "type": "string",
                    "format": "zxcvbn"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "v0.UpdateUsernameInput": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "format": "username"
                }
            }
        },
        "v0.UploadResourceOutput": {
            "type": "object",
            "properties": {
                "object_id": {
                    "type": "string"
                }
            }
        },
        "v0.UploadResourcesOutput": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v0.UploadResourceOutput"
                    }
                }
            }
        },
        "v0.VerifyEmailInput": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "v0.VerifyRecoveryCodeInput": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "otp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "API for account management",
            "name": "Account API"
        },
        {
            "description": "API for authentication and authorization",
            "name": "Authentication and Authorization API"
        },
        {
            "description": "API for geocoding",
            "name": "Geocoding API"
        },
        {
            "description": "API for master profile management",
            "name": "Master Profile API"
        },
        {
            "description": "API for master service management",
            "name": "Master Service API"
        },
        {
            "description": "API for getting metrics and healthcheck",
            "name": "Metrics API"
        },
        {
            "description": "API for download and upload files",
            "name": "Resource API"
        },
        {
            "description": "API for getting swagger documentation",
            "name": "Swagger API"
        },
        {
            "description": "API for establishing websocket connection",
            "name": "Websocket API"
        }
    ]
}