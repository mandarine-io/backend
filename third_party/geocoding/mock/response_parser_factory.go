// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	geocoding "github.com/mandarine-io/backend/third_party/geocoding"
	mock "github.com/stretchr/testify/mock"
)

// ResponseParserFactoryMock is an autogenerated mock type for the ResponseParserFactory type
type ResponseParserFactoryMock struct {
	mock.Mock
}

type ResponseParserFactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseParserFactoryMock) EXPECT() *ResponseParserFactoryMock_Expecter {
	return &ResponseParserFactoryMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *ResponseParserFactoryMock) Execute() geocoding.ResponseParser {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 geocoding.ResponseParser
	if rf, ok := ret.Get(0).(func() geocoding.ResponseParser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(geocoding.ResponseParser)
		}
	}

	return r0
}

// ResponseParserFactoryMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ResponseParserFactoryMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *ResponseParserFactoryMock_Expecter) Execute() *ResponseParserFactoryMock_Execute_Call {
	return &ResponseParserFactoryMock_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *ResponseParserFactoryMock_Execute_Call) Run(run func()) *ResponseParserFactoryMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResponseParserFactoryMock_Execute_Call) Return(_a0 geocoding.ResponseParser) *ResponseParserFactoryMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseParserFactoryMock_Execute_Call) RunAndReturn(run func() geocoding.ResponseParser) *ResponseParserFactoryMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponseParserFactoryMock creates a new instance of ResponseParserFactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseParserFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseParserFactoryMock {
	mock := &ResponseParserFactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
